const readline = require("readline");

const Request = function(req) {
  this.path = req;
  this.header = "mock request header";
};

const Response = function() {
  this.header = "mock response header";
  this.locals = {};
};

Response.prototype.json = function(jsonResponse) {
  console.log(
    `request response cycle is complete. JSON object: ${JSON.stringify(
      jsonResponse
    )} has been sent to client`
  );
};

const express = function() {
  const _middlewares = [];

  const _processMiddlewares = function(req, res) {
    let processNextMiddleware = false;

    for (const middleware of _middlewares) {
      middleware(req, res, () => {
        processNextMiddleware = true;
      });

      if (processNextMiddleware) {
        processNextMiddleware = false;
      } else {
        break;
      }
    }
  };

  const _processRequest = function(incomingRequest) {
    const req = new Request(incomingRequest);
    const res = new Response();

    _processMiddlewares(req, res);
  };

  const use = function(...args) {
    if (args.length === 1) {
      _middlewares.push(args[0]);
    } else {
      _middlewares.push(args[1]);
    }
  };

  const listen = function(port) {
    const rl = readline.createInterface(process.stdin, process.stdout);

    rl.setPrompt("\n>> enter URL to request ('ctrl-c' to exit): ");

    rl.on("line", fakeHttpRequest => {
      _processRequest(fakeHttpRequest);

      rl.prompt();
    });

    rl.on("close", () => {
      console.log("\n>> exiting express");
    });

    console.log(`>> listening on (fake) port: ${port}`);

    rl.prompt();
  };

  return { use, listen };
};

module.exports = express;
